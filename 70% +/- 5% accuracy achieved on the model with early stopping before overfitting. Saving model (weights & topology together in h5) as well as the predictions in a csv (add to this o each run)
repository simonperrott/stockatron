{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "stockatron_baseline_model.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOjLCY2PGEsUSz6WZEDNsI0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/simonperrott/stockatron/blob/master/70%25%20%2B/-%205%25%20accuracy%20achieved%20on%20the%20model%20with%20early%20stopping%20before%20overfitting.%20Saving%20model%20(weights%20%26%20topology%20together%20in%20h5)%20as%20well%20as%20the%20predictions%20in%20a%20csv%20(add%20to%20this%20o%20each%20run)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EtjZd564Drc1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        },
        "outputId": "61c65678-e20e-4694-9417-c6542047fd21"
      },
      "source": [
        "!pip install yfinance"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting yfinance\n",
            "  Downloading https://files.pythonhosted.org/packages/c2/31/8b374a12b90def92a4e27d0fc595fc43635f395984e36a075244d98bd265/yfinance-0.1.54.tar.gz\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.6/dist-packages (from yfinance) (1.0.5)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.6/dist-packages (from yfinance) (1.18.5)\n",
            "Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.6/dist-packages (from yfinance) (2.23.0)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.6/dist-packages (from yfinance) (0.0.9)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.24->yfinance) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.24->yfinance) (2.8.1)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20->yfinance) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20->yfinance) (2020.6.20)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20->yfinance) (3.0.4)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20->yfinance) (1.24.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.6.1->pandas>=0.24->yfinance) (1.15.0)\n",
            "Building wheels for collected packages: yfinance\n",
            "  Building wheel for yfinance (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for yfinance: filename=yfinance-0.1.54-py2.py3-none-any.whl size=22409 sha256=5737d49af730234bbbe258d0292ff01d5f0dcfe95e386eeb0ece9e481e91f065\n",
            "  Stored in directory: /root/.cache/pip/wheels/f9/e3/5b/ec24dd2984b12d61e0abf26289746c2436a0e7844f26f2515c\n",
            "Successfully built yfinance\n",
            "Installing collected packages: yfinance\n",
            "Successfully installed yfinance-0.1.54\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4RMI4D49XHN7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import yfinance as yt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from matplotlib import pyplot\n",
        "\n",
        "pd.options.display.float_format = '{:.2f}'.format\n",
        "pd.options.display.max_rows = 15\n",
        "pd.options.display.max_columns = 20\n",
        "\n",
        "pyplot.style.use(\"dark_background\")"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ub9a1V7ykYOM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# ADD a LIST of Symbols to load."
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wjT80hP_Sj-u",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fn to create the price change after X numDaysForward.\n",
        "def create_change_column(df:pd.DataFrame, threshold:float, numDaysForward = -5):\n",
        "  df['CloseAfterXDays'] = df['Close'].shift(numDaysForward, axis=0)\n",
        "  change_series = 100* (df['CloseAfterXDays'] - df['Open'])/df['Open']\n",
        "  return change_series"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KEb8Wur7X2AA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "outputId": "13a16842-36d2-413e-f1e4-881416616d25"
      },
      "source": [
        "amzn = yt.Ticker('AMZN')\n",
        "start_date = '1999-01-01'\n",
        "df = amzn.history(start=start_date)\n",
        "df.drop(['Dividends', 'Stock Splits', 'High', 'Low'], axis=1, inplace=True)\n",
        "df['change'] = create_change_column(df, 5.0)\n",
        "\n",
        "# S&P500\n",
        "gspc = yt.Ticker('^GSPC')\n",
        "df_gspc = gspc.history(start=start_date)\n",
        "df['sp500_change'] = create_change_column(df_gspc, 5.0)\n",
        "\n",
        "df[['change', 'sp500_change']].plot()\n",
        "pyplot.legend(loc=\"upper right\")\n",
        "pyplot.show()\n",
        "\n",
        "print(df.head(5))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "            Open  Close    Volume  CloseAfterXDays  change  sp500_change\n",
            "Date                                                                    \n",
            "1999-01-04 54.61  59.16  39292200            92.31   69.03          2.82\n",
            "1999-01-05 54.78  62.25  62873200            81.69   49.12          0.93\n",
            "1999-01-06 68.19  69.00  36176600            74.00    8.52         -0.83\n",
            "1999-01-07 68.56  79.44  47274600            69.00    0.64         -4.73\n",
            "1999-01-08 92.12  80.12  66662200            70.19  -23.81         -2.08\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8UdpM6vBQ87_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "stockActions_to_label = {'Sell': -1, 'Hold': 0, 'Buy': 1}\n",
        "label_to_stockAction = {v: k for k, v in stockActions_to_label.items()}\n",
        "\n",
        "def create_labels(df:pd.DataFrame, threshold:float):\n",
        "  # 0 Hold => -ve threshold < % Change < +ve threshold\n",
        "  # 1 Buy => % Change > +ve threshold\n",
        "  # -1 Sell => % Change < -ve threshold\n",
        "  df['label'] = df['change'].apply(\n",
        "      lambda x: stockActions_to_label['Buy'] if x > threshold \n",
        "      else stockActions_to_label['Sell'] if x < -1*threshold \n",
        "      else stockActions_to_label['Hold'])\n",
        "  df.dropna(inplace=True)\n",
        "  return df"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p8zVyKz3I7T5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "7bdcfc1b-a391-4416-f51e-d72f0e71c993"
      },
      "source": [
        "df = create_labels(df, 5.0)\n",
        "print(df.tail(5))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              Open   Close   Volume  CloseAfterXDays  change  sp500_change  \\\n",
            "Date                                                                         \n",
            "2020-07-20 3000.20 3196.84  7598200          3055.21    1.83          0.47   \n",
            "2020-07-21 3232.49 3138.29  6135000          3000.33   -7.18         -1.53   \n",
            "2020-07-22 3125.00 3099.91  4104200          3033.53   -2.93          0.11   \n",
            "2020-07-23 3098.27 2986.55  5656900          3051.88   -1.50         -0.78   \n",
            "2020-07-24 2930.00 3008.91  5632400          3164.68    8.01          1.63   \n",
            "\n",
            "            label  \n",
            "Date               \n",
            "2020-07-20      0  \n",
            "2020-07-21     -1  \n",
            "2020-07-22      0  \n",
            "2020-07-23      0  \n",
            "2020-07-24      1  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CfHICic9QGd1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Scale input features\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "def scale_features(df:pd.DataFrame, feature_column_names):\n",
        "  \n",
        "  df[['change', 'sp500_change']].hist()\n",
        "  pyplot.show()\n",
        "  scaler = StandardScaler() # Using Standardization as ditribution is Gaussian (alternative -> MinMaxScaler(feature_range=(-1, 1))\n",
        "  for col in feature_column_names:\n",
        "    df[col] = scaler.fit_transform(df[[col]])\n",
        "\n",
        "  df.dropna(inplace=True)\n",
        "  return df"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6OmawVZsTic0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "outputId": "56bc8827-6b5b-4048-f675-63dfdc1acb83"
      },
      "source": [
        "features = ['change', 'sp500_change']\n",
        "\n",
        "df = scale_features(df, features)\n",
        "\n",
        "# select subset of columns with features for the timeseries and label\n",
        "features.append('label')\n",
        "df = df[features]\n",
        "print(df.tail(5))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "            change  sp500_change  label\n",
            "Date                                   \n",
            "2020-07-20    0.14          0.12      0\n",
            "2020-07-21   -1.00         -0.62     -1\n",
            "2020-07-22   -0.46         -0.01      0\n",
            "2020-07-23   -0.28         -0.34      0\n",
            "2020-07-24    0.92          0.56      1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uAZXd2GmGz90",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from pandas import DataFrame\n",
        "from pandas import concat\n",
        "\n",
        "def dataframe_to_supervised(df, input_cols, pred_col, n_timesteps=1, dropnan=True):\n",
        "\t\"\"\"\n",
        "\tTime series -> LSTM supervised learning dataset.\n",
        "\tArguments:\n",
        "\t\tdata: Sequence of observations as a NumPy array.\n",
        "\t\tinput_cols: list of strings identifying the input feature columns to use in shifting\n",
        "\t\tn_timesteps: Number of lag observations as input (X).\n",
        "\t\tpred_col: the name of the column we want to predict\n",
        "\t\tdropnan: Boolean whether or not to drop rows with NaN values.\n",
        "\tReturns:\n",
        "\t\tPandas DataFrame of series framed for supervised learning.\n",
        "\t\"\"\"\n",
        "\tcols, names = list(), list()\n",
        "\t# input sequence (t-n, ... t-1)\n",
        "\tfor i in range(n_timesteps, 0, -1):\n",
        "\t\tcols.append(df[input_cols].shift(i))\n",
        "\t\tnames += [f'{c}(t-{i})' for c in input_cols]\n",
        "\n",
        "\t# add pred_col\n",
        "\tcols.append(df[pred_col])\n",
        "\tnames.append(pred_col)\n",
        "\n",
        "\tagg = concat(cols, axis=1)\n",
        "\tagg.columns = names\n",
        "\t# drop rows with NaN values\n",
        "\tif dropnan:\n",
        "\t\tagg.dropna(inplace=True)\n",
        "\treturn agg"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ufj6pvCwHEp4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 259
        },
        "outputId": "80f9f296-3dda-43e5-bc24-196f736bfabc"
      },
      "source": [
        "# Baseline 1st Model uses:\n",
        "# batches of timeseries of prices going back 20 days\n",
        "num_time_steps = 20\n",
        "df_price_ts = dataframe_to_supervised(df, ['change', 'sp500_change'], 'label', num_time_steps, dropnan = False)\n",
        "prediction_X = df_price_ts.values[-1, :-1]\n",
        "# now drop NaNs created during transformation to a Timeseries\n",
        "df_price_ts.dropna(inplace=True)\n",
        "print(df_price_ts.shape)\n",
        "df_price_ts.tail(2)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(5405, 41)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>change(t-20)</th>\n",
              "      <th>sp500_change(t-20)</th>\n",
              "      <th>change(t-19)</th>\n",
              "      <th>sp500_change(t-19)</th>\n",
              "      <th>change(t-18)</th>\n",
              "      <th>sp500_change(t-18)</th>\n",
              "      <th>change(t-17)</th>\n",
              "      <th>sp500_change(t-17)</th>\n",
              "      <th>change(t-16)</th>\n",
              "      <th>sp500_change(t-16)</th>\n",
              "      <th>...</th>\n",
              "      <th>sp500_change(t-5)</th>\n",
              "      <th>change(t-4)</th>\n",
              "      <th>sp500_change(t-4)</th>\n",
              "      <th>change(t-3)</th>\n",
              "      <th>sp500_change(t-3)</th>\n",
              "      <th>change(t-2)</th>\n",
              "      <th>sp500_change(t-2)</th>\n",
              "      <th>change(t-1)</th>\n",
              "      <th>sp500_change(t-1)</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2020-07-23</th>\n",
              "      <td>0.36</td>\n",
              "      <td>-0.03</td>\n",
              "      <td>0.61</td>\n",
              "      <td>0.97</td>\n",
              "      <td>1.19</td>\n",
              "      <td>1.24</td>\n",
              "      <td>1.37</td>\n",
              "      <td>1.52</td>\n",
              "      <td>1.77</td>\n",
              "      <td>1.42</td>\n",
              "      <td>...</td>\n",
              "      <td>0.27</td>\n",
              "      <td>-0.09</td>\n",
              "      <td>-0.15</td>\n",
              "      <td>0.14</td>\n",
              "      <td>0.12</td>\n",
              "      <td>-1.00</td>\n",
              "      <td>-0.62</td>\n",
              "      <td>-0.46</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-07-24</th>\n",
              "      <td>0.61</td>\n",
              "      <td>0.97</td>\n",
              "      <td>1.19</td>\n",
              "      <td>1.24</td>\n",
              "      <td>1.37</td>\n",
              "      <td>1.52</td>\n",
              "      <td>1.77</td>\n",
              "      <td>1.42</td>\n",
              "      <td>1.86</td>\n",
              "      <td>0.50</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.15</td>\n",
              "      <td>0.14</td>\n",
              "      <td>0.12</td>\n",
              "      <td>-1.00</td>\n",
              "      <td>-0.62</td>\n",
              "      <td>-0.46</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>-0.28</td>\n",
              "      <td>-0.34</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 41 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            change(t-20)  sp500_change(t-20)  change(t-19)  \\\n",
              "Date                                                         \n",
              "2020-07-23          0.36               -0.03          0.61   \n",
              "2020-07-24          0.61                0.97          1.19   \n",
              "\n",
              "            sp500_change(t-19)  change(t-18)  sp500_change(t-18)  \\\n",
              "Date                                                               \n",
              "2020-07-23                0.97          1.19                1.24   \n",
              "2020-07-24                1.24          1.37                1.52   \n",
              "\n",
              "            change(t-17)  sp500_change(t-17)  change(t-16)  \\\n",
              "Date                                                         \n",
              "2020-07-23          1.37                1.52          1.77   \n",
              "2020-07-24          1.77                1.42          1.86   \n",
              "\n",
              "            sp500_change(t-16)  ...  sp500_change(t-5)  change(t-4)  \\\n",
              "Date                            ...                                   \n",
              "2020-07-23                1.42  ...               0.27        -0.09   \n",
              "2020-07-24                0.50  ...              -0.15         0.14   \n",
              "\n",
              "            sp500_change(t-4)  change(t-3)  sp500_change(t-3)  change(t-2)  \\\n",
              "Date                                                                         \n",
              "2020-07-23              -0.15         0.14               0.12        -1.00   \n",
              "2020-07-24               0.12        -1.00              -0.62        -0.46   \n",
              "\n",
              "            sp500_change(t-2)  change(t-1)  sp500_change(t-1)  label  \n",
              "Date                                                                  \n",
              "2020-07-23              -0.62        -0.46              -0.01      0  \n",
              "2020-07-24              -0.01        -0.28              -0.34      1  \n",
              "\n",
              "[2 rows x 41 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jWyTtpH8lhC_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "outputId": "fd0e74a5-231c-4114-c67a-16d6cff12452"
      },
      "source": [
        "# Plot the data classes using only the previous day's change & sp500 change\n",
        "df_price_ts['color'] = df_price_ts['label'].apply(lambda x: 'blue' if x==0 else 'red' if x==-1 else 'green')\n",
        "\n",
        "df_price_ts.plot.scatter(x='change(t-1)', y='sp500_change(t-1)', c='color')\n",
        "pyplot.title('Change of S&P500 yesterday vs Change of Stock yesterday')\n",
        "pyplot.show()\n",
        "\n",
        "df_price_ts.plot.scatter(x='change(t-1)', y='change(t-2)', c='color')\n",
        "pyplot.title('Change of Stock 2 days ago vs Change of Stock yesterday')\n",
        "pyplot.show()\n",
        "# Note a Linear model could not separate these to classify correctly\n",
        "df_price_ts.drop(['color'] , axis=1, inplace=True)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E1YNo5dsC6Il",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Choose Training data (avoiding data leak by training set having no data points in future of test set)\n",
        "train = df_price_ts.loc['2000' :'2017']"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hcXB5BDg1kDW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "a3ff1716-79cf-43d5-f851-dcc97bc07094"
      },
      "source": [
        "# Explore balance of classes in Training set\n",
        "label_groupings = train['label'].value_counts()\n",
        "print(label_groupings)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " 0    2881\n",
            " 1     947\n",
            "-1     700\n",
            "Name: label, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xlvdmc63-iiV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "54a7ba70-0a10-4acd-b97c-7b35be73bc2c"
      },
      "source": [
        "# Balance classes in Training set by Down sampling randomly.\n",
        "# This is important for accuracy as I'm more interested in accurately predicting cases -1 and +1 rather than 0.\n",
        "from sklearn.utils import resample\n",
        "\n",
        "min_label_count = label_groupings.min()\n",
        "df_list = []\n",
        "# Separate by label\n",
        "for label in label_groupings.index:\n",
        "  df_for_label = train[train.label == label]\n",
        "  df_list.append(\n",
        "      resample(  \n",
        "          df_for_label, \n",
        "          replace = False,    # sample without replacement\n",
        "          n_samples = min_label_count     # to match minority class\n",
        "          )) \n",
        "\n",
        "train_balanced = pd.concat(df_list)\n",
        "\n",
        "print(train_balanced.shape) \n",
        "# Display new class counts\n",
        "train_balanced.label.value_counts()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2100, 41)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 1    700\n",
              "-1    700\n",
              " 0    700\n",
              "Name: label, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kpNmG0icUwEq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "8144aa02-74cb-4258-f485-27bed4700b56"
      },
      "source": [
        "from keras.utils import np_utils\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "training_set = train_balanced.values\n",
        "\n",
        "train_X, train_y = training_set[:, :-1], training_set[:, -1]\n",
        "\n",
        "# encode class values as integers\n",
        "encoder = LabelEncoder()\n",
        "encoder.fit(train_y)\n",
        "train_y_encoded = encoder.transform(train_y)\n",
        "# convert integers to dummy variables (i.e. one hot encoded)\n",
        "train_y_dummy = np_utils.to_categorical(train_y_encoded)\n",
        "\n",
        "# Validation data 2018 - 2019\n",
        "val = df_price_ts.loc['2018' :'2019'].values\n",
        "val_X, val_y = val[:, :-1], val[:, -1]\n",
        "val_y_encoded = encoder.transform(val_y)\n",
        "val_y_dummy = np_utils.to_categorical(val_y_encoded)\n",
        "\n",
        "# Test data 2020\n",
        "test = df_price_ts.loc['2020'].values\n",
        "test_X, test_y = test[:, :-1], test[:, -1]\n",
        "test_y_encoded = encoder.transform(test_y)\n",
        "test_y_dummy = np_utils.to_categorical(test_y_encoded)\n",
        "\n",
        "n_features = 2\n",
        "\n",
        "# reshape input to be 3D [samples, timesteps, features]\n",
        "train_X = train_X.reshape(train_X.shape[0], num_time_steps, n_features)\n",
        "val_X = val_X.reshape(val_X.shape[0], num_time_steps, n_features)\n",
        "test_X = test_X.reshape(test_X.shape[0], num_time_steps, n_features)\n",
        "\n",
        "print(f'Train X has shape: {train_X.shape} & Train y has shape: {train_y_dummy.shape}')\n",
        "print(f'Validation X has shape: {val_X.shape} & Validation y has shape: {val_y_dummy.shape}')\n",
        "print(f'Test X has shape: {test_X.shape} & Test y has shape: {test_y_dummy.shape}')"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Train X has shape: (2100, 20, 2) & Train y has shape: (2100, 3)\n",
            "Validation X has shape: (503, 20, 2) & Validation y has shape: (503, 3)\n",
            "Test X has shape: (142, 20, 2) & Test y has shape: (142, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mFVTomFgUvuh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "outputId": "a060cc24-17b5-43cc-c177-49f47c5ec5e0"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Flatten, LSTM, Dropout\n",
        "\n",
        "# design network \n",
        "model = Sequential()\n",
        "model.add(LSTM(100, activation='tanh', input_shape=(num_time_steps, n_features), dropout=0.4))\n",
        "model.add(Dropout(0.4))\n",
        "model.add(Dense(3, activation='softmax'))\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        " \n",
        "# fit network\n",
        "batch_size = 378 # non-stateful LSTM's only keep state/context within a batch so I'm using a batch size that covers the past 18 months of trading days.\n",
        "history = model.fit(train_X, train_y_dummy, epochs=275, batch_size=batch_size, validation_data=(val_X, val_y_dummy), verbose=0, shuffle=False)\n",
        "# TODO: try with shuffling\n",
        "\n",
        "# plot history\n",
        "pyplot.plot(history.history['loss'], label='training loss')\n",
        "pyplot.plot(history.history['val_loss'], label='validation loss')\n",
        "pyplot.legend()\n",
        "pyplot.show()\n",
        "\n",
        "# evaluate model against an unseen test set\n",
        "_, accuracy = model.evaluate(test_X, test_y_dummy)\n",
        "print('Accuracy: %.2f' % (accuracy*100))\n",
        "\n",
        "# Note: Model scores between 60 - 70% \n",
        "# Note2: The reason the validation loss drops lower than the trianing loss is likely because validation loss does not have dropout regularization\n",
        "# i.e. dropout in training sacrifices the training loss in order to avoid overfitting and improves the validation loss.\n",
        "# The model then starts to overfit at epoch 400 so best to stop training then or add regularizer to bias & weights"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "142/142 [==============================] - 0s 231us/step\n",
            "Accuracy: 70.42\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "euZZJtOFUvg0",
        "colab_type": "text"
      },
      "source": [
        "Possible Extensions: \n",
        "* Try adding a layer\n",
        "* Try normnalising features to be between 0 and 1 and using the signmoid activation fn."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l3_pjYv6F6DR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5463f554-9803-4cfe-f1d8-50906cba139e"
      },
      "source": [
        "# Predict the change over the next 5 days\n",
        "x = prediction_X.reshape(1, num_time_steps, n_features)\n",
        "next5days_class = model.predict_classes(x)[0]\n",
        "action_to_take = label_to_stockAction.get(next5days_class)\n",
        "print(f'Stock change expected to be: {next5days_class} within next 5 trading days so {action_to_take}')"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Stock change expected to be: 1 within next 5 trading days so Buy\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-iSw4kXyo7kd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "6d7b5814-2559-467d-de9b-16a4798072b4"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L7YfoKmwYiKM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Save model & create a file with stats\n",
        "import os.path\n",
        "from datetime import date\n",
        "\n",
        "file_dir = '/content/drive/My Drive/stockatron'\n",
        "file_name = 'stock_predictions.csv'\n",
        "stats_file = os.path.join(file_dir, file_name)\n",
        "\n",
        "today = date.today()\n",
        "data = {'Symbol': 'AMZN', 'Date': today.strftime(\"%Y-%m-%d\"), 'Model_Accuracy': accuracy*100, 'Prediction': next5days_class}  \n",
        "\n",
        "if os.path.exists(stats_file):\n",
        "  results_df = pd.read_csv(stats_file)\n",
        "  results_df.append(data, ignore_index=True)\n",
        "else:\n",
        "  results_df = pd.DataFrame.from_records([data])\n",
        "  results_df.to_csv(stats_file)\n",
        "\n",
        "model.save(os.path.join(file_dir, 'latest_model.h5v'))\n",
        "#model = load_model('latest_model.h5v')\n",
        "#model.summary()"
      ],
      "execution_count": 20,
      "outputs": []
    }
  ]
}